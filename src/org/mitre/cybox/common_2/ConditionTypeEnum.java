//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.09.25 at 01:41:27 PM EDT 
//


package org.mitre.cybox.common_2;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ConditionTypeEnum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ConditionTypeEnum">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Equals"/>
 *     &lt;enumeration value="DoesNotEqual"/>
 *     &lt;enumeration value="Contains"/>
 *     &lt;enumeration value="DoesNotContain"/>
 *     &lt;enumeration value="StartsWith"/>
 *     &lt;enumeration value="EndsWith"/>
 *     &lt;enumeration value="GreaterThan"/>
 *     &lt;enumeration value="GreaterThanOrEqual"/>
 *     &lt;enumeration value="LessThan"/>
 *     &lt;enumeration value="LessThanOrEqual"/>
 *     &lt;enumeration value="InclusiveBetween"/>
 *     &lt;enumeration value="ExclusiveBetween"/>
 *     &lt;enumeration value="FitsPattern"/>
 *     &lt;enumeration value="BitwiseAnd"/>
 *     &lt;enumeration value="BitwiseOr"/>
 *     &lt;enumeration value="BitwiseXor"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "ConditionTypeEnum")
@XmlEnum
public enum ConditionTypeEnum {


    /**
     * Specifies the equality or = condition.
     * 
     */
    @XmlEnumValue("Equals")
    EQUALS("Equals"),

    /**
     * Specifies the "does not equal" or != condition.
     * 
     */
    @XmlEnumValue("DoesNotEqual")
    DOES_NOT_EQUAL("DoesNotEqual"),

    /**
     * Specifies the "contains" condition.
     * 
     */
    @XmlEnumValue("Contains")
    CONTAINS("Contains"),

    /**
     * Specifies the "does not contain" condition.
     * 
     */
    @XmlEnumValue("DoesNotContain")
    DOES_NOT_CONTAIN("DoesNotContain"),

    /**
     * Specifies the "starts with" condition.
     * 
     */
    @XmlEnumValue("StartsWith")
    STARTS_WITH("StartsWith"),

    /**
     * Specifies the "ends with" condition.
     * 
     */
    @XmlEnumValue("EndsWith")
    ENDS_WITH("EndsWith"),

    /**
     * Specifies the "greater than" condition.
     * 
     */
    @XmlEnumValue("GreaterThan")
    GREATER_THAN("GreaterThan"),

    /**
     * Specifies the "greater than or equal to" condition.
     * 
     */
    @XmlEnumValue("GreaterThanOrEqual")
    GREATER_THAN_OR_EQUAL("GreaterThanOrEqual"),

    /**
     * Specifies the "less than" condition.
     * 
     */
    @XmlEnumValue("LessThan")
    LESS_THAN("LessThan"),

    /**
     * Specifies the "less than or equal" condition.
     * 
     */
    @XmlEnumValue("LessThanOrEqual")
    LESS_THAN_OR_EQUAL("LessThanOrEqual"),

    /**
     * The pattern is met if the given value lies between the values indicated in the field value body, inclusive of the bounding values themselves. The field value body MUST contain at least 2 values to be valid. If the field value body contains more than 2 values, then only the greatest and least values are considered. (I.e., If the body contains "2,4,6", then an InclusiveBetween condition would be satisfied if the observed value fell between 2 and 6, inclusive. Since this is an inclusive range, an observed value of 2 or 6 would fit the pattern in this example.) As such, always treat the InclusiveBetween condition as applying to a single range for the purpose of evaluating the apply_condition attribute.
     * 
     */
    @XmlEnumValue("InclusiveBetween")
    INCLUSIVE_BETWEEN("InclusiveBetween"),

    /**
     * The pattern is met if the given value lies between the values indicated in the field value body, exclusive of the bounding values themselves. The field value body MUST contain at least 2 values to be valid. If the field value body contains more than 2 values, then only the greatest and least values are considered. (I.e., If the body contains "2,4,6", then an InclusiveBetween condition would be satisfied if the observed value fell between 2 and 6, exclusive. Since this is an exclusive range, an observed value of 2 or 6 would not fit the pattern in this example.) As such, always treat the ExclusiveBetween condition as applying to a single range for the purpose of evaluating the apply_condition attribute.
     * 
     */
    @XmlEnumValue("ExclusiveBetween")
    EXCLUSIVE_BETWEEN("ExclusiveBetween"),

    /**
     * Specifies the condition that a value fits a given pattern.
     * 
     */
    @XmlEnumValue("FitsPattern")
    FITS_PATTERN("FitsPattern"),

    /**
     * Specifies the condition of bitwise AND. Specifically, when applying this pattern, a given value is bitwise-ANDed with the bit_mask attribute value (which must be present). If the result is identical to the value provided in the body of this field value, the pattern is considered fulfilled.
     * 
     */
    @XmlEnumValue("BitwiseAnd")
    BITWISE_AND("BitwiseAnd"),

    /**
     * Specifies the condition of bitwise OR. Specifically, when applying this pattern, a given value is bitwise-ORed with the bit_mask attribute value (which must be present). If the result is identical to the value provided in the body of this field value, the pattern is considered fulfilled.
     * 
     */
    @XmlEnumValue("BitwiseOr")
    BITWISE_OR("BitwiseOr"),

    /**
     * Specifies the condition of bitwise XOR. Specifically, when applying this pattern, a given value is bitwise-XORed with the bit_mask attribute value (which must be present). If the result is identical to the value provided in the body of this field value, the pattern is considered fulfilled.
     * 
     */
    @XmlEnumValue("BitwiseXor")
    BITWISE_XOR("BitwiseXor");
    private final String value;

    ConditionTypeEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ConditionTypeEnum fromValue(String v) {
        for (ConditionTypeEnum c: ConditionTypeEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
