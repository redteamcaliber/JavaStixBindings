//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.09.25 at 01:41:27 PM EDT 
//


package org.mitre.cybox.default_vocabularies_2;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for InformationSourceTypeEnum-1.0.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="InformationSourceTypeEnum-1.0">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Comm Logs"/>
 *     &lt;enumeration value="Application Logs"/>
 *     &lt;enumeration value="Web Logs"/>
 *     &lt;enumeration value="DBMS Log"/>
 *     &lt;enumeration value="OS/Device Driver APIs"/>
 *     &lt;enumeration value="Frameworks"/>
 *     &lt;enumeration value="VM Hypervisor"/>
 *     &lt;enumeration value="TPM"/>
 *     &lt;enumeration value="Application Framework"/>
 *     &lt;enumeration value="Help Desk"/>
 *     &lt;enumeration value="Incident Management"/>
 *     &lt;enumeration value="IAVM"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "InformationSourceTypeEnum-1.0")
@XmlEnum
public enum InformationSourceTypeEnum10 {


    /**
     * The Comm Logs value specifies a cyber observation coming from communications logs.
     * 
     */
    @XmlEnumValue("Comm Logs")
    COMM_LOGS("Comm Logs"),

    /**
     * The Application Logs value specifies a cyber observation coming from application logs.
     * 
     */
    @XmlEnumValue("Application Logs")
    APPLICATION_LOGS("Application Logs"),

    /**
     * The Web Logs value specifies a cyber observation coming from web logs.
     * 
     */
    @XmlEnumValue("Web Logs")
    WEB_LOGS("Web Logs"),

    /**
     * The DBMS Log value specifies a cyber observation coming from the Database Management System log.
     * 
     */
    @XmlEnumValue("DBMS Log")
    DBMS_LOG("DBMS Log"),

    /**
     * The OS/Device Driver APIs value specifies a cyber observation coming from OS/Device Driver APIs.
     * 
     */
    @XmlEnumValue("OS/Device Driver APIs")
    OS_DEVICE_DRIVER_AP_IS("OS/Device Driver APIs"),

    /**
     * The Frameworks value specifies a cyber observation coming from Frameworks.
     * 
     */
    @XmlEnumValue("Frameworks")
    FRAMEWORKS("Frameworks"),

    /**
     * The VM Hypervisor value specifies a cyber observation coming from the VM hypervisor data.
     * 
     */
    @XmlEnumValue("VM Hypervisor")
    VM_HYPERVISOR("VM Hypervisor"),

    /**
     * The TPM value specifies a cyber observation made using TPM output data.
     * 
     */
    TPM("TPM"),

    /**
     * The Application Framework value specifies a cyber observation coming from an application framework.
     * 
     */
    @XmlEnumValue("Application Framework")
    APPLICATION_FRAMEWORK("Application Framework"),

    /**
     * The Help Desk value specifies a cyber observation coming from an human or automated help desk.
     * 
     */
    @XmlEnumValue("Help Desk")
    HELP_DESK("Help Desk"),

    /**
     * The Incident Management value specifies a cyber observation made using information provided by Incident Management services.
     * 
     */
    @XmlEnumValue("Incident Management")
    INCIDENT_MANAGEMENT("Incident Management"),

    /**
     * The IAVM value specifies a cyber observation made using information provided by Information Assurance Vulnerability Management mechanisms.
     * 
     */
    IAVM("IAVM");
    private final String value;

    InformationSourceTypeEnum10(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static InformationSourceTypeEnum10 fromValue(String v) {
        for (InformationSourceTypeEnum10 c: InformationSourceTypeEnum10 .values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
