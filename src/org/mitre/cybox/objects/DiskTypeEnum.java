//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.09.25 at 01:41:27 PM EDT 
//


package org.mitre.cybox.objects;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for DiskTypeEnum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="DiskTypeEnum">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Removable"/>
 *     &lt;enumeration value="Fixed"/>
 *     &lt;enumeration value="Remote"/>
 *     &lt;enumeration value="CDRom"/>
 *     &lt;enumeration value="RAMDisk"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "DiskTypeEnum", namespace = "http://cybox.mitre.org/objects#DiskObject-2")
@XmlEnum
public enum DiskTypeEnum {


    /**
     * Indicates the removable disk type.
     * 
     */
    @XmlEnumValue("Removable")
    REMOVABLE("Removable"),

    /**
     * Indicates the fixed disk type.
     * 
     */
    @XmlEnumValue("Fixed")
    FIXED("Fixed"),

    /**
     * Indicates the remote disk type.
     * 
     */
    @XmlEnumValue("Remote")
    REMOTE("Remote"),

    /**
     * Indicates the CDRom disk type.
     * 
     */
    @XmlEnumValue("CDRom")
    CD_ROM("CDRom"),

    /**
     * Indicates the RAMDisk disk type.
     * 
     */
    @XmlEnumValue("RAMDisk")
    RAM_DISK("RAMDisk");
    private final String value;

    DiskTypeEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static DiskTypeEnum fromValue(String v) {
        for (DiskTypeEnum c: DiskTypeEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
