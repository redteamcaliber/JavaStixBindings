//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.09.25 at 01:41:27 PM EDT 
//


package org.mitre.cybox.objects;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for BlockTypeEnum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="BlockTypeEnum">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Initialized"/>
 *     &lt;enumeration value="Uninitialized"/>
 *     &lt;enumeration value="Overlay"/>
 *     &lt;enumeration value="Bit-mapped"/>
 *     &lt;enumeration value="Byte-mapped"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "BlockTypeEnum", namespace = "http://cybox.mitre.org/objects#MemoryObject-2")
@XmlEnum
public enum BlockTypeEnum {


    /**
     * Indicates that the memory block is initialized.
     * 
     */
    @XmlEnumValue("Initialized")
    INITIALIZED("Initialized"),

    /**
     * Indicates that the memory block is uninitialized.
     * 
     */
    @XmlEnumValue("Uninitialized")
    UNINITIALIZED("Uninitialized"),

    /**
     * Indicates that the memory block is an overlay.
     * 
     */
    @XmlEnumValue("Overlay")
    OVERLAY("Overlay"),

    /**
     * Indicates that the memory block is bit-mapped.
     * 
     */
    @XmlEnumValue("Bit-mapped")
    BIT_MAPPED("Bit-mapped"),

    /**
     * Indicates that the memory block is byte-mapped.
     * 
     */
    @XmlEnumValue("Byte-mapped")
    BYTE_MAPPED("Byte-mapped");
    private final String value;

    BlockTypeEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static BlockTypeEnum fromValue(String v) {
        for (BlockTypeEnum c: BlockTypeEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
