//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.09.25 at 01:41:27 PM EDT 
//


package org.mitre.cybox.objects;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for RegistryDataTypesEnum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="RegistryDataTypesEnum">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="REG_NONE"/>
 *     &lt;enumeration value="REG_SZ"/>
 *     &lt;enumeration value="REG_EXPAND_SZ"/>
 *     &lt;enumeration value="REG_BINARY"/>
 *     &lt;enumeration value="REG_DWORD"/>
 *     &lt;enumeration value="REG_DWORD_BIG_ENDIAN"/>
 *     &lt;enumeration value="REG_LINK"/>
 *     &lt;enumeration value="REG_MULTI_SZ"/>
 *     &lt;enumeration value="REG_RESOURCE_LIST"/>
 *     &lt;enumeration value="REG_FULL_RESOURCE_DESCRIPTOR"/>
 *     &lt;enumeration value="REG_RESOURCE_REQUIREMENTS_LIST"/>
 *     &lt;enumeration value="REG_QWORD"/>
 *     &lt;enumeration value="REG_INVALID_TYPE"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "RegistryDataTypesEnum", namespace = "http://cybox.mitre.org/objects#WinRegistryKeyObject-2")
@XmlEnum
public enum RegistryDataTypesEnum {


    /**
     * No defined value type.
     * 
     */
    REG_NONE,

    /**
     * A null-terminated string. This will be either a Unicode or an ANSI string, depending on whether you use the Unicode or ANSI functions.
     * 
     */
    REG_SZ,

    /**
     * A null-terminated string that contains unexpanded references to environment variables (for example, "%PATH%"). It will be a Unicode or ANSI string depending on whether you use the Unicode or ANSI functions.
     * 
     */
    REG_EXPAND_SZ,

    /**
     * Binary data in any form.
     * 
     */
    REG_BINARY,

    /**
     * A 32-bit number.
     * 
     */
    REG_DWORD,

    /**
     * A 32-bit number in big-endian format. Some UNIX systems support big-endian architectures.
     * 
     */
    REG_DWORD_BIG_ENDIAN,

    /**
     * A null-terminated Unicode string that contains the target path of a symbolic link.
     * 
     */
    REG_LINK,

    /**
     * A sequence of null-terminated strings, terminated by an empty string (\0).
     * 
     */
    REG_MULTI_SZ,

    /**
     * A series of nested arrays designed to store a resource list used by a hardware device driver or one of the physical devices it controls. This data is detected and written into the ResourceMap tree by the system and is displayed in Registry Editor in hexadecimal format as a Binary Value.
     * 
     */
    REG_RESOURCE_LIST,

    /**
     * A series of nested arrays designed to store a resource list used by a physical hardware device. This data is detected and written into the HardwareDescription tree by the system and is displayed in Registry Editor in hexadecimal format as a Binary Value.
     * 
     */
    REG_FULL_RESOURCE_DESCRIPTOR,

    /**
     * Device driver list of hardware resource requirements in Resource Map tree. See http://www.mdgx.com/reg.htm.
     * 
     */
    REG_RESOURCE_REQUIREMENTS_LIST,

    /**
     * A 64-bit number.
     * 
     */
    REG_QWORD,

    /**
     * Specifies an invalid key.
     * 
     */
    REG_INVALID_TYPE;

    public String value() {
        return name();
    }

    public static RegistryDataTypesEnum fromValue(String v) {
        return valueOf(v);
    }

}
